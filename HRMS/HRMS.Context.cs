//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRMS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class HRMSEntities : DbContext
    {
        public HRMSEntities()
            : base("name=HRMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Employee> Employees { get; set; }
        public DbSet<EmpSalary> EmpSalaries { get; set; }
        public DbSet<State> States { get; set; }
    
        public virtual int sp_ManageEmployee(Nullable<int> empId, string empName, string email, string state, string city, string address, string zipCode, Nullable<bool> deactive, string callType)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var deactiveParameter = deactive.HasValue ?
                new ObjectParameter("Deactive", deactive) :
                new ObjectParameter("Deactive", typeof(bool));
    
            var callTypeParameter = callType != null ?
                new ObjectParameter("CallType", callType) :
                new ObjectParameter("CallType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManageEmployee", empIdParameter, empNameParameter, emailParameter, stateParameter, cityParameter, addressParameter, zipCodeParameter, deactiveParameter, callTypeParameter);
        }
    
        public virtual int sp_ManageEmpSalary(Nullable<int> id, Nullable<int> empId, Nullable<decimal> salary, Nullable<int> salaryMonth, Nullable<int> salaryYear, string callType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(decimal));
    
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(int));
    
            var salaryYearParameter = salaryYear.HasValue ?
                new ObjectParameter("SalaryYear", salaryYear) :
                new ObjectParameter("SalaryYear", typeof(int));
    
            var callTypeParameter = callType != null ?
                new ObjectParameter("CallType", callType) :
                new ObjectParameter("CallType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManageEmpSalary", idParameter, empIdParameter, salaryParameter, salaryMonthParameter, salaryYearParameter, callTypeParameter);
        }
    }
}
